###########################################################################
#
# The pure-Docker development environment for Spending Journal is described
# inside this docker-compose file.
#
# The detailed usage is described in README.md.
#
###########################################################################
version: '3.7'

services:
  db:
    image: mysql/mysql-server:5.7
    container_name: db
    restart: always
    # These options are added to support full Unicode.
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    # For details:
    # https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/docker-mysql-more-topics.html#docker-environment-variables
    environment:
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_DATABASE: mydb
      MYSQL_USER: root
      MYSQL_PASSWORD: rootroot
    # A volume will be automatically created, and mapped to /var/lib/mysql insdie the container.
    volumes:
      - /var/lib/mysql
    networks:
      - backend

  api:
    build:
      context: ./api
      dockerfile: Dockerfile.development
      args:
        - uid
        - gid
    image: spendingjournal/api:development
    container_name: api
    restart: always
    env_file: ./api/.env.development
    # Mount the API's source code into the container.
    #
    # Note: With --user option, pip installs site-packages into a directory under your home directory,
    # which means you should not mount project's files directly to the home directory, installed
    # packages will be obscured.
    volumes:
      - "./api:/home/spendingjournal/api"
    ports:
      - "5000:5000"
    command: flask run --host=0.0.0.0
    depends_on:
      - db
    networks:
      - backend

  web:
    build:
      context: ./web
      dockerfile: Dockerfile.development
      args:
        - uid
        - gid
    image: spendingjournal/web:development
    container_name: web
    restart: always
    volumes:
      - "./web:/home/spendingjournal/web"
      # In contrast to Python site-packages that the API's source code and the installed packages
      # not not have to be in the same folder, which means we need to bind-mount the Web's source
      # into the same folder with node_modules inside the container.
      #
      # However, node_modules has been obscured by this bind-mount, apply the trick:
      # https://jdlm.info/articles/2019/09/06/lessons-building-node-app-docker.html
      - "spendingjournal_node_modules:/home/spendingjournal/web/node_modules"
    ports:
      - "80:8080"
    networks:
      - frontend
    depends_on: 
      - api

networks:
  frontend:
  backend:

volumes:
  spendingjournal_node_modules: